trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore

stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'

#    - task: DownloadSecureFile@1
#      name: udacity_public_key
#      displayName: 'Download Public Key'
#      inputs:
#        secureFile: 'azure_eqr_id_rsa.pub'


    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'default'
        sshKeySecureFile: 'azure_eqr_id_rsa'

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Copy terraform.tfvars

#    - bash: |
#        echo Pipeline workspace dir is $(Pipeline.Workspace)
#        echo Terraform variable definition file is $(tfvardef.secureFilePath)
#        cd $(Agent.TempDirectory)
#        pwd
#        ls -la
#        cat azure_eqr_id_rsa.pub
#        cd ~/.ssh/
#        pwd
#        ls -la
#        cat known_hosts
#        # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
#        cd $(System.DefaultWorkingDirectory)
#        pwd
#        ls -la
#      displayName: Verify build environment (pre)

    # install Terraform Azure Pipelines Extension by Microsoft DevLabs
    # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.14.10'

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'azurerm-sc-eqr'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate17096'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: TerraformTaskV1@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
	    commandOptions: -var "public_key=$(PUBLIC_KEY)"
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azurerm-sc-eqr'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'azurerm-sc-eqr'
              appName: 'marco-paspuel-webapi-appservice'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
