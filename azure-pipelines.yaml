trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore

stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    - task: DownloadSecureFile@1
      name: eqr_vm_public_key
      displayName: Download Public Key
      inputs:
        secureFile: 'azure_eqr_id_rsa.pub'

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Copy terraform.tfvars

    - bash: |
        mkdir ~/.ssh/
        cp $(Agent.TempDirectory)/azure_eqr_id_rsa.pub ~/.ssh/azure_eqr_id_rsa.pub
        chmod 400 ~/.ssh/azure_eqr_id_rsa.pub
      displayName: Copy ssh key

    # install Terraform Azure Pipelines Extension by Microsoft DevLabs
    # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.14.10'

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'azurerm-sc-eqr'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate17096'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: TerraformTaskV1@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azurerm-sc-eqr'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'azurerm-sc-eqr-app'
              appName: 'marco-paspuel-webapi-appservice'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
              TakeAppOfflineFlag: false

  - deployment: deployment_vm
    displayName: Deploy Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              pwd
              hostname
              uname -a
              cat /etc/*-release
              sudo apt-get install software-properties-common -y
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              python3 -V
              pip3 -V
              /usr/bin/chromium-browser --version
              /usr/bin/chromedriver --version
              python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
            displayName: Configure selenium

- stage: Test
  jobs:
  - deployment: test_vm
    displayName: Test on Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/drop-selenium
              find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
              unzip -o selenium-$(Build.BuildId).zip
              pwd
              ls -la
              sudo mkdir -p /var/log/selenium
              sudo chmod 664 /var/log/selenium
              sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
              # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              pwd
              sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
              ls -la
            displayName: Run selenium tests
          - task: PublishPipelineArtifact@1
            displayName: Publish selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'
