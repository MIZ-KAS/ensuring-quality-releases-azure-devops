name: Azure Pipelines
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore

variables:
  # Azure Resource Manager service connection for pipelines
  serviceConnectionTerraform: 'azurerm-sc-eqr'
  serviceConnectionProject: 'azurerm-sc-eqr-app'

  # Web app name
  webAppName: 'marco-paspuel-webapi-appservice'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Python version: 3.7.6
  pythonVersion: '3.7.6'

  # Terraform version
  tf_version: "0.14.7"

  # Jmeter version
  jmeterVersion: '5.2.1'

  # Environment name
  environmentName: 'test'

stages:
- stage: provision
  displayName: 'Provision'
  jobs:
  - job: provision_azure_infrastructure
    displayName: 'Provisioning Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      displayName: 'Download terraform.tfvars'
      name: tfvardef
      inputs:
        secureFile: 'terraform.tfvars'
    - task: Bash@3
      displayName: 'Copy terraform.tfvars to vm'
      inputs:
        targetType: 'inline'
        script: |
          cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test

    - task: DownloadSecureFile@1
      displayName: 'Download public ssh Key'
      name: eqr_vm_public_key
      inputs:
        secureFile: 'azure_eqr_id_rsa.pub'
    - task: Bash@3
      displayName: 'Copy public ssh key to vm'
      inputs:
        targetType: 'inline'
        script: |
          mkdir ~/.ssh/
          cp $(Agent.TempDirectory)/azure_eqr_id_rsa.pub ~/.ssh/azure_eqr_id_rsa.pub
          chmod 400 ~/.ssh/azure_eqr_id_rsa.pub

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '0.14.10'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'azurerm-sc-eqr'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate17096'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azurerm-sc-eqr'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: 'Build Artifacts'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish FakeRestAPI artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: 'Archive Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Selenium artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: 'Deploy FakeRestAPI'
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'azurerm-sc-eqr-app'
              appName: 'marco-paspuel-webapi-appservice'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
              TakeAppOfflineFlag: false

  - deployment: deployment_vm
    displayName: 'Deploy Virtual Machine'
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              displayName: 'Install and Configure selenium on VM agent'
              inputs:
                targetType: 'inline'
                script: |
                  pwd
                  hostname
                  uname -a
                  cat /etc/*-release
                  sudo apt-get install software-properties-common -y
                  sudo apt-add-repository universe -y
                  sudo apt-get update -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  python3 -m pip install --upgrade pip
                  pip3 install selenium==3.141.0
                  python3 -V
                  pip3 -V
                  /usr/bin/chromium-browser --version
                  /usr/bin/chromedriver --version
                  python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"

            - task: Bash@3
              displayName: 'Install Log Analytics agent on VM agent'
              inputs:
                targetType: 'inline'
                script: |
                  pwd
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                  sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
                  sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
#                env:  # To use secret variables in a script, we must explicitly map them as environment variables.
#                  AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
#                  AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)

- stage: Test
  jobs:
  - deployment: test_vm
    displayName: Functional UI Tests
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/drop-selenium
              find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
              unzip -o selenium-$(Build.BuildId).zip
              pwd
              ls -la
              sudo mkdir -p /var/log/selenium
              sudo chmod 664 /var/log/selenium
              sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
              # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              pwd
              sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
              ls -la
            displayName: Run selenium tests
          - task: PublishPipelineArtifact@1
            displayName: Publish selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'

  - job: test_jmeter
    displayName: Test JMeter
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.4.1/bin/jmeter --version
        # create log directory
        mkdir -p log/jmeter
        pwd
        ls -la
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/stress_test.jmx \
                                     -l log/jmeter/stress_test_results.csv \
                                     -e -f -o log/jmeter/stress_test_report \
                                     -j log/jmeter/jmeter_stress_test.log
      displayName: JMeter stress test
    - bash: |
        apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/endurance_test.jmx \
                                     -l log/jmeter/endurance_test_results.csv \
                                     -e -f -o log/jmeter/endurance_test_html_report \
                                     -j log/jmeter/jmeter_endurance_test.log
      displayName: JMeter endurance test
    - task: ArchiveFiles@2
      displayName: Archive JMeter stress test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress_test_report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress_test_report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance_test_html_report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance_test_html_report-$(Build.BuildId).zip'
        verbose: true
    - bash: |
        rm -rf log/jmeter/stress_test_report
        rm -rf log/jmeter/endurance_test_html_report
        cd log/jmeter
        pwd
        ls -la
      displayName: Delete original JMeter test HTML reports
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'drop-jmeter-logs'

  - job: test_newman
    displayName: Test Postman (using Newman CLI)
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - bash: |
        npm install -g newman
        newman --version
        # create log directory
        mkdir -p log/newman
        pwd
        ls -la
      displayName: Install Newman
    - bash: |
        newman run automatedtesting/postman/regression_test.json \
                   -e automatedtesting/postman/marco_paspuel_webapi_env.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/regression-test.xml \
                   --suppress-exit-code
      displayName: Newman regression test
    - bash: |
        newman run automatedtesting/postman/validation_test.json \
                   -e automatedtesting/postman/marco_paspuel_webapi_env.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/validation-test.xml \
                   --suppress-exit-code
        ls -la $(System.DefaultWorkingDirectory)/log/newman/
      displayName: Newman validation test
    - task: PublishPipelineArtifact@1
      displayName: Publish Newman logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
        artifactName: 'drop-newman-logs'
    - task: PublishTestResults@2
      displayName: 'Publish Newman test results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Publish Newman test results'
